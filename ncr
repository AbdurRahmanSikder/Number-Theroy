ll power(ll x, ll y, ll p )
{
    unsigned long long res = 1;
 
    x = x % p;
    while (y > 0)
    {
 
        if (y & 1)
            res = (res * x) % p;
 
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}
ll modInverse(ll n, ll p)       // using fermats little thm. [p needs to be prime which is mostly the case as mod value generally is 1e9+7]
{
    return power(n, p - 2, p);
}

ll nCr(ll n, ll r, ll p)     // faster calculation.. 
{
    if (n < r)
        return 0;
 
    if (r == 0)
        return 1;
        
    vector<ll> fac(n+1,0);
    fac[0] = 1;
    for (ll i = 1; i <= n; i++)
        fac[i] = (fac[i - 1] * i) % p;
 
    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;
}
